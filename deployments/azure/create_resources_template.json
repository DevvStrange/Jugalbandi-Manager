{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "namespaces_ehnstesting_name": {
        "type": "string",
        "metadata": {
          "description": "The name of the Eventhub Namespace"
        }
      },
      "postgresqlServerName": {
        "type": "string",
        "metadata": {
          "description": "The name of the PostgreSQL Flexible Server."
        }
      },
      "location": {
        "type": "string",
        "metadata": {
          "description": "The location for the resources."
        }
      },
      "adminUser": {
        "type": "string",
        "metadata": {
          "description": "The administrator username for the PostgreSQL Flexible Server."
        }
      },
      "adminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "The administrator password for the PostgreSQL Flexible Server."
        }
      },
      "databaseName": {
        "type": "string",
        "metadata": {
          "description": "The name of the database to create in the PostgreSQL Flexible Server."
        }
      },
      "storageAccountName": {
        "type": "string",
        "metadata": {
          "description": "The name of the Storage Account."
        }
      },
      "containerName": {
        "type": "string",
        "metadata": {
          "description": "The name of the container in the Storage Account."
        }
      },
      "containerAppName": {
        "type": "string",
        "metadata": {
          "description": "The name of the Container App."
        }
      },
      "containerAppEnvironmentName": {
        "type": "string",
        "metadata": {
          "description": "The name of the Container App environment."
        }
      },
      "containerTargetPort": {
        "type": "int",
        "metadata": {
          "description": "The target port for the container."
        }
      },
      "cpu": {
        "type": "string",
        "defaultValue": "0.5",
        "metadata": {
          "description": "The CPU allocation for the container."
        }
      },
      "memory": {
        "type": "string",
        "defaultValue": "1Gi",
        "metadata": {
          "description": "The memory allocation for the container."
        }
      },
      "minReplicas": {
        "type": "int",
        "defaultValue": 1,
        "metadata": {
          "description": "The minimum number of container replicas."
        }
      },
      "maxReplicas": {
        "type": "int",
        "defaultValue": 2,
        "metadata": {
          "description": "The maximum number of container replicas."
        }
      },
      "environmentVariables": {
        "type": "array",
        "metadata": {
          "description": "The list of environment variables for the container."
        },
        "defaultValue": [
          {
            "name": "POSTGRES_DATABASE_NAME",
            "value": "example_db"
          },
          {
            "name": "POSTGRES_DATABASE_USERNAME",
            "value": "example_user"
          }
        ]
      }
    },
    "resources": [
      {
        "type": "Microsoft.EventHub/namespaces",
        "apiVersion": "2024-01-01",
        "name": "[parameters('namespaces_ehnstesting_name')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Standard",
          "tier": "Standard",
          "capacity": 1
        },
        "properties": {
          "minimumTlsVersion": "1.2",
          "publicNetworkAccess": "Enabled",
          "disableLocalAuth": false,
          "zoneRedundant": true,
          "isAutoInflateEnabled": true,
          "maximumThroughputUnits": 5,
          "kafkaEnabled": true
        }
      },
      {
        "type": "Microsoft.EventHub/namespaces/authorizationrules",
        "apiVersion": "2024-01-01",
        "name": "[concat(parameters('namespaces_ehnstesting_name'), '/listen')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_ehnstesting_name'))]"
        ],
        "properties": {
          "rights": [
            "Listen"
          ]
        }
      },
      {
        "type": "Microsoft.EventHub/namespaces/authorizationrules",
        "apiVersion": "2024-01-01",
        "name": "[concat(parameters('namespaces_ehnstesting_name'), '/RootManageSharedAccessKey')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_ehnstesting_name'))]"
        ],
        "properties": {
          "rights": [
            "Listen",
            "Manage",
            "Send"
          ]
        }
      },
      {
        "type": "Microsoft.EventHub/namespaces/authorizationrules",
        "apiVersion": "2024-01-01",
        "name": "[concat(parameters('namespaces_ehnstesting_name'), '/send')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_ehnstesting_name'))]"
        ],
        "properties": {
          "rights": [
            "Send"
          ]
        }
      },
      {
        "type": "Microsoft.EventHub/namespaces/eventhubs",
        "apiVersion": "2024-01-01",
        "name": "[concat(parameters('namespaces_ehnstesting_name'), '/channel')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_ehnstesting_name'))]"
        ],
        "properties": {
          "retentionDescription": {
            "cleanupPolicy": "Delete",
            "retentionTimeInHours": 1
          },
          "messageRetentionInDays": 1,
          "partitionCount": 1,
          "status": "Active"
        }
      },
      {
        "type": "Microsoft.EventHub/namespaces/eventhubs",
        "apiVersion": "2024-01-01",
        "name": "[concat(parameters('namespaces_ehnstesting_name'), '/flow')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_ehnstesting_name'))]"
        ],
        "properties": {
          "retentionDescription": {
            "cleanupPolicy": "Delete",
            "retentionTimeInHours": 1
          },
          "messageRetentionInDays": 1,
          "partitionCount": 1,
          "status": "Active"
        }
      },
      {
        "type": "Microsoft.EventHub/namespaces/eventhubs",
        "apiVersion": "2024-01-01",
        "name": "[concat(parameters('namespaces_ehnstesting_name'), '/language')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_ehnstesting_name'))]"
        ],
        "properties": {
          "retentionDescription": {
            "cleanupPolicy": "Delete",
            "retentionTimeInHours": 1
          },
          "messageRetentionInDays": 1,
          "partitionCount": 1,
          "status": "Active"
        }
      },
      {
        "type": "Microsoft.EventHub/namespaces/networkrulesets",
        "apiVersion": "2024-01-01",
        "name": "[concat(parameters('namespaces_ehnstesting_name'), '/default')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_ehnstesting_name'))]"
        ],
        "properties": {
          "publicNetworkAccess": "Enabled",
          "defaultAction": "Allow",
          "virtualNetworkRules": [],
          "ipRules": [],
          "trustedServiceAccessEnabled": false
        }
      },
      {
        "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
        "apiVersion": "2024-01-01",
        "name": "[concat(parameters('namespaces_ehnstesting_name'), '/channel/$Default')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('namespaces_ehnstesting_name'), 'channel')]",
          "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_ehnstesting_name'))]"
        ],
        "properties": {}
      },
      {
        "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
        "apiVersion": "2024-01-01",
        "name": "[concat(parameters('namespaces_ehnstesting_name'), '/flow/$Default')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('namespaces_ehnstesting_name'), 'flow')]",
          "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_ehnstesting_name'))]"
        ],
        "properties": {}
      },
      {
        "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
        "apiVersion": "2024-01-01",
        "name": "[concat(parameters('namespaces_ehnstesting_name'), '/language/$Default')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('namespaces_ehnstesting_name'), 'language')]",
          "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_ehnstesting_name'))]"
        ],
        "properties": {}
      },
      {
        "type": "Microsoft.DBforPostgreSQL/flexibleServers",
        "apiVersion": "2023-12-01-preview",
        "name": "[parameters('postgresqlServerName')]",
        "location": "[parameters('location')]",
        "properties": {
          "replica": {
            "role": "Primary"
          },
          "storage": {
            "iops": 120,
            "tier": "P4",
            "storageSizeGB": 32,
            "autoGrow": "Enabled"
          },
          "network": {
            "publicNetworkAccess": "Enabled"
          },
          "dataEncryption": {
            "type": "SystemManaged"
          },
          "authConfig": {
            "activeDirectoryAuth": "Disabled",
            "passwordAuth": "Enabled"
          },
          "version": "16",
          "administratorLogin": "[parameters('adminUser')]",
          "administratorLoginPassword": "[parameters('adminPassword')]",
          "availabilityZone": "1",
          "backup": {
            "backupRetentionDays": 7,
            "geoRedundantBackup": "Disabled"
          },
          "highAvailability": {
            "mode": "Disabled"
          },
          "maintenanceWindow": {
            "customWindow": "Disabled",
            "dayOfWeek": 0,
            "startHour": 0,
            "startMinute": 0
          },
          "replicationRole": "Primary"
        },
        "sku": {
          "name": "Standard_D2ds_v4",
          "tier": "GeneralPurpose",
          "family": "D",
          "capacity": 2
        }
      },
      {
        "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
        "apiVersion": "2023-12-01-preview",
        "name": "[concat(parameters('postgresqlServerName'), '/', parameters('databaseName'))]",
        "properties": {
            "charset": "UTF8",
            "collation": "en_US.utf8"
        },
        "dependsOn": [
          "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresqlServerName'))]"
        ]
      },
      {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2023-05-01",
        "name": "[parameters('storageAccountName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Standard_LRS",
          "tier": "Standard"
        },
        "kind": "StorageV2",
        "properties": {
            "dnsEndpointType": "Standard",
            "defaultToOAuthAuthentication": false,
            "publicNetworkAccess": "Enabled",
            "allowCrossTenantReplication": false,
            "minimumTlsVersion": "TLS1_2",
            "allowBlobPublicAccess": true,
            "allowSharedKeyAccess": true,
            "networkAcls": {
                "bypass": "AzureServices",
                "virtualNetworkRules": [],
                "ipRules": [],
                "defaultAction": "Allow"
            },
            "supportsHttpsTrafficOnly": true,
            "encryption": {
                "requireInfrastructureEncryption": false,
                "services": {
                    "file": {
                        "keyType": "Account",
                        "enabled": true
                    },
                    "blob": {
                        "keyType": "Account",
                        "enabled": true
                    }
                },
                "keySource": "Microsoft.Storage"
            },
            "accessTier": "Hot"
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts/blobServices",
        "apiVersion": "2023-05-01",
        "name": "[concat(parameters('storageAccountName'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
        ],
        "sku": {
            "name": "Standard_LRS",
            "tier": "Standard"
        },
        "properties": {
            "changeFeed": {
                "enabled": false
            },
            "restorePolicy": {
                "enabled": false
            },
            "containerDeleteRetentionPolicy": {
                "enabled": true,
                "days": 7
            },
            "cors": {
                "corsRules": []
            },
            "deleteRetentionPolicy": {
                "allowPermanentDelete": false,
                "enabled": true,
                "days": 7
            },
            "isVersioningEnabled": false
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
        "apiVersion": "2023-05-01",
        "name": "[concat(parameters('storageAccountName'), '/default/', parameters('containerName'))]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]",
            "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
        ],
        "properties": {
            "immutableStorageWithVersioning": {
                "enabled": false
            },
            "defaultEncryptionScope": "$account-encryption-key",
            "denyEncryptionScopeOverride": false,
            "publicAccess": "None"
        }
      },
      {
        "type": "Microsoft.App/managedEnvironments",
        "apiVersion": "2022-03-01",
        "name": "[parameters('containerAppEnvironmentName')]",
        "location": "[parameters('location')]",
        "properties": {}
      },
      {
        "type": "Microsoft.App/containerApps",
        "apiVersion": "2022-03-01",
        "name": "[parameters('containerAppName')]",
        "location": "[parameters('location')]",
        "dependsOn": [
            "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppEnvironmentName'))]"
        ],
        "properties": {
          "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppEnvironmentName'))]",
          "configuration": {
            "ingress": {
              "external": true,
              "targetPort": "[parameters('containerTargetPort')]",
              "traffic": [
                {
                  "latestRevision": true,
                  "weight": 100
                }
              ]
            },
            "dapr": {
              "enabled": false
            }
          },
          "template": {
            "containers": [
              {
                "name": "[parameters('containerAppName')]",
                "image": "opennyaiin/jugalbandi-manager:api-v1.0.4",
                "resources": {
                  "cpu": "[parameters('cpu')]",
                  "memory": "[parameters('memory')]"
                },
                "env": "[parameters('environmentVariables')]"
              }
            ],
            "scale": {
              "minReplicas": "[parameters('minReplicas')]",
              "maxReplicas": "[parameters('maxReplicas')]",
              "rules": [
                {
                  "name": "http-rule",
                  "custom": {
                    "type": "http",
                    "metadata": {
                      "concurrentRequests": "50"
                    }
                  }
                }
              ]
            }
          },
          "workloadProfileName": "Consumption"
        }
      }
    ]
  }
  